name: Flatpak

on:
  pull_request:
    paths-ignore:
      - '*.md'
  push:
    branches:
      - '*'
    paths-ignore:
      - '*.md'
    tags-ignore:
      - '*'
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  build-n-bundle:
    name: Build & Bundle
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install helpful tools
        run: |
          sudo apt update
          sudo apt install xmlstarlet
          curl --fail --location --retry 3 --output /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Extract details about the app
        id: details
        run: |
          set -x
          shopt -s nullglob
          shopt -s nocaseglob
          for manifest in *.json *.yml *.yaml
          do
            id=$(yq eval '.app-id // ""' "${manifest}")
            if [ -n "${id}" ]
            then
              branch=$(yq eval '.branch // "master"' "${manifest}")
              echo "app_id=${id}" >> "${GITHUB_OUTPUT}"
              echo "manifest=${manifest}" >> "${GITHUB_OUTPUT}"
              echo "branch=${branch}" >> "${GITHUB_OUTPUT}"
              echo "Found app-id '${id}' in '${manifest}' (branch: '${branch}')."
              exit 0
            fi
          done
          echo 'Unable to find a valid Flatpak manifest.'
          exit 1

      - name: Show path of Flatpak manifest
        run: echo '${{ steps.details.outputs.manifest }}'

      - name: Show Flatpak app id
        run: echo '${{ steps.details.outputs.app_id }}'

      - name: Install Flatpak
        run: |
          sudo apt update
          sudo apt install flatpak

      - name: Show version of Flatpak
        run: flatpak --version

      - name: Restore Flatpak build tools from cache
        uses: actions/cache/restore@v3
        with:
          key: flatpak-tools-${{ matrix.arch }}-${{ github.run_id }}
          path: ~/.local/share/flatpak
          restore-keys: |
            flatpak-tools-${{ matrix.arch }}

      - name: Install or update Flatpak build tools
        run: |
          flatpak --user remote-add \
            --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak --user install \
            --noninteractive \
            --or-update \
            flathub \
            org.flatpak.Builder \
            org.flathub.flatpak-external-data-checker

      - name: Save Flatpak build tools to cache
        if: ${{ always() }}
        uses: actions/cache/save@v3
        with:
          key: flatpak-tools-${{ matrix.arch }}-${{ github.run_id }}
          path: ~/.local/share/flatpak

      - name: Show version of flatpak-builder
        run: flatpak run org.flatpak.Builder --version

      - name: Validate manifest
        run: |
          flatpak run --command=flatpak-builder-lint \
            org.flatpak.Builder \
            --exceptions '${{ steps.details.outputs.manifest }}'

      - name: Set up QEMU
        if: matrix.arch != 'x86_64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.arch == 'aarch64' && 'arm64' || matrix.arch }}

      - name: Restore Flatpak build directory from cache
        uses: actions/cache/restore@v3
        with:
          key: flatpak-build-dir-${{ matrix.arch }}-${{ github.run_id }}
          path: .flatpak-builder
          restore-keys: |
            flatpak-build-dir-${{ matrix.arch }}

      - name: Build (${{ matrix.arch }})
        run: |
          dbus-run-session flatpak run org.flatpak.Builder \
            --arch ${{ matrix.arch }} \
            --build-only \
            --delete-build-dirs \
            --force-clean \
            --install-deps-from flathub \
            --sandbox \
            --user \
            --verbose \
            builddir/ \
            '${{ steps.details.outputs.manifest }}'

      - name: Save Flatpak build directory to cache
        if: ${{ always() }}
        uses: actions/cache/save@v3
        with:
          key: flatpak-build-dir-${{ matrix.arch }}-${{ github.run_id }}
          path: .flatpak-builder

      - name: Update AppStream release version
        id: version
        run: |
          set -e
          set -x
          for appdata in builddir/files/share/metainfo/'${{ steps.details.outputs.app_id }}'.*.xml
          do
            version=$(xmlstarlet select \
              --template \
              --value-of '/component/releases/release[1]/@version' \
              "${appdata}"
            )
            echo "Found version '${version}' in '${appdata}'."
            tag="$(git describe --tags HEAD | sed -r 's/^v//')"
            if [ -n "${tag}" ]
            then
              updated_version="${tag}"
            else
              n_commits=$(git rev-list --count HEAD)
              short_sha=$(git rev-parse --short HEAD)
              updated_version=$(printf '%s+r%s+g%s' "${version}" "${n_commits}" "${short_sha}")
            fi
            xmlstarlet edit \
              --inplace \
              --update '/component/releases/release[1]/@version' \
              --value "${updated_version}" \
              "${appdata}"
            echo "value=${updated_version}" >> "${GITHUB_OUTPUT}"
            echo "Successfully updated version to: '${updated_version}'."
          done

      - name: Finish build (${{ matrix.arch }})
        run: |
          dbus-run-session flatpak run org.flatpak.Builder \
            --arch ${{ matrix.arch }} \
            --finish-only \
            --repo repo/ \
            --verbose \
            builddir/ \
            '${{ steps.details.outputs.manifest }}'

      - name: Check for AppStream xml
        run: stat builddir/*/share/app-info/xmls/'${{ steps.details.outputs.app_id }}.xml.gz'

      - name: AppStream validation
        run: |
          flatpak run \
            --env=G_DEBUG=fatal-criticals \
            --command=appstream-util \
            org.flatpak.Builder validate \
            builddir/*/share/appdata/'${{ steps.details.outputs.app_id }}.appdata.xml'

      - name: Check for 128x128 icon
        run: |
          zgrep '<icon type="remote">' \
            builddir/*/share/app-info/xmls/'${{ steps.details.outputs.app_id }}.xml.gz' ||
            test -f builddir/*/share/app-info/icons/flatpak/128x128/'${{ steps.details.outputs.app_id }}.png'

      - name: Extract the name of the app
        id: name
        run: |
          set -x
          name=$(xmlstarlet select \
            --template \
            --value-of '/component/name' \
            builddir/*/share/appdata/'${{ steps.details.outputs.app_id }}.appdata.xml' |
            tr '[:upper:]' '[:lower:]' |
            tr '[:blank:]' '_'
          )
          if [ -z "${name}" ]
          then
            echo 'Failed to extract the name of the app, will use "my_flatpak_app" instead.'
            name='my_flatpak_app'
          fi
          echo "value=${name}" >> "${GITHUB_OUTPUT}"

      - name: Bundle (${{ matrix.arch }})
        run: |
          flatpak build-bundle \
            --arch ${{ matrix.arch }} repo/ \
            '${{ steps.name.outputs.value }}_${{ steps.version.outputs.value }}-${{ matrix.arch }}.flatpak' \
            '${{ steps.details.outputs.app_id }}' \
            '${{ steps.details.outputs.branch }}'

      - name: Upload (${{ matrix.arch }})
        uses: actions/upload-artifact@v3
        with:
          path: '${{ steps.name.outputs.value }}_${{ steps.version.outputs.value }}-${{ matrix.arch }}.flatpak'
          name: '${{ steps.name.outputs.value }}_${{ steps.version.outputs.value }}-${{ matrix.arch }}'

      - name: Create GitHub Release
        if: github.event_name == 'release'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: '${{ steps.name.outputs.value }}_${{ steps.version.outputs.value }}-${{ matrix.arch }}.flatpak'
          body: '${{ steps.name.outputs.value }} ${{ steps.version.outputs.value }}'
